import numpy as np
import matplotlib.pyplot as plt
x=np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])
y=np.array([65,155,245,335]) #w_i, i=1,2,3=10; b=5

def cost_func(x,y,w,b):
    J=0
    for i in range(x.shape[0]):
        J+=(1/2*x.shape[0])*(np.dot(w,x[i])+b-y[i])**2
    return J

def gradient_func(x,y,w,b):
    dJ_db=0
    dJ_dw=np.zeros(x.shape[1])
    for i in range(x.shape[0]):
        dJ_db+=(1/x.shape[0])*(np.dot(w,x[i])+b-y[i])
        for j in range(x.shape[1]):
            
            s=0
            for k in range(x.shape[1]):
                s+=(1/x.shape[0])*(np.dot(w,x[i])+b-y[i])*x[i,j]
            dJ_dw[j]=s
    return dJ_dw,dJ_db
def gradient_descent(x,y,w,b,alpha,iters,cost_func,gradient_func):
    J_hist=[]
    p=[]
    for i in range(iters):
        p.append(i+1)
        J_temp=cost_func(x,y,w,b)
        J_hist.append(J_temp)
        dJ_dw,dJ_db=gradient_func(x,y,w,b)
        w-=alpha*dJ_dw
        b-=alpha*dJ_db
    return w,b,p,J_hist,

w=[0,0,0]
b=0
alpha=0.001
iterations=1000
w,b,J_hist,p=gradient_descent(x,y,w,b,alpha,iterations,cost_func,gradient_func)
plt.xlabel("iteration")
plt.ylabel("Cost function")
plt.plot(p,J_hist,c='b')


    
print(f"The values of the parameters are:{w} and {b}")


plt.show()
